/**
 ------------------------------------------------------------------------------
 * @file    Slope_Filter.cpp
 * @author  Shake
 * @brief   滑动滤波算法
 * @version V1.0
 * @date    2022-04
 * @copyright Copyright (c) 2021
 ------------------------------------------------------------------------------
 * @note
   滑动平均滤波算法只采样一次，将一次采样值和过去的若干次采样值一起求平均，得到的有效采样值即可投入使用
   如果取N个采样值求平均，存储区中必须开辟N个数据的暂存区
   每新采集一个数据便存入暂存区中，同时去掉一个最老数据，保存这N个数据始终是最新更新的数据
   采用环型队列结构可以方便地实现这种数据存放方式
   优点：
        对周期性干扰有良好的抑制作用，平滑度高
        适用于高频振荡的系统 

   缺点：
        灵敏度低
        对偶然出现的脉冲性干扰的抑制作用较差
        不易消除由于脉冲干扰所引起的采样值偏差
        不适用于脉冲干扰比较严重的场合
        比较浪费RAM
 */

/* Includes ------------------------------------------------------------------*/
#include "Slope_Filter.h"
/* Private macros ------------------------------------------------------------*/
/* function prototypes -------------------------------------------------------*/
/* Private type --------------------------------------------------------------*/
/* Exported macros -----------------------------------------------------------*/
/* Exported types ------------------------------------------------------------*/
/* Exported variables --------------------------------------------------------*/
/* Private function declarations ---------------------------------------------*/

/**
 * @brief   滑动滤波计算
 * @note    把数据往上一层计算       
 * @note    len长度相当于一个窗口的大小 对窗口数据做平均  
 * @note    滤波长度不要大于100
 * @note    当数据大于数组长度，替换数据组的一个数据，相当于环形队列更新，先进先出
 * @retval  filter out
 */
float SlopeFilter_Calc(float data ,float *queue ,uint16_t len)
{
	float sum = 0;
	float res = 0;
  
    //队列已满 FIFO
    for(uint16_t i = 0 ; i < len-1 ; i++)
    {
        //更新队列
        queue[i] = queue[i+1];
    }
    queue[len-1] = data;
    
	//更新队列完毕
	for(uint16_t j = 0 ; j < len ; j++)
	{
		sum += queue[j];
	}
	res = sum/(len);
	
	return res;
}

